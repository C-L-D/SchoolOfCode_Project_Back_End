{
  "service": {
    "service": "royal-code",
    "serviceObject": {
      "name": "royal-code"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "lambdaHashingVersion": "20201221",
      "region": "eu-west-1",
      "environment": {
        "DYNAMODB_ENERGISER_TABLE": "energiser-table",
        "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
        "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
        "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
        "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
        "DYNAMODB_RESOURCE_TABLE": "resource-table",
        "DYNAMODB_RECORDING_TABLE": "recording-table",
        "DYNAMODB_WEEK_TABLE": "week-table",
        "DYNAMODB_EVENT_TABLE": "event-table",
        "DOMAIN_SUFFIX": "royal-code"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem",
            "dynamodb:BatchGetItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:eu-west-1:*:table/energiser-table",
            "arn:aws:dynamodb:eu-west-1:*:table/bootcamper-table",
            "arn:aws:dynamodb:eu-west-1:*:table/bootcamper-2-table",
            "arn:aws:dynamodb:eu-west-1:*:table/bootcamper-4-table",
            "arn:aws:dynamodb:eu-west-1:*:table/bootcamper-8-table",
            "arn:aws:dynamodb:eu-west-1:*:table/resource-table",
            "arn:aws:dynamodb:eu-west-1:*:table/week-table",
            "arn:aws:dynamodb:eu-west-1:*:table/recording-table",
            "arn:aws:dynamodb:eu-west-1:*:table/event-table"
          ]
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ListEnergiserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listEnergiser"
            }
          },
          "EnergiserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-energiser"
            }
          },
          "CreateEnergiserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createEnergiser"
            }
          },
          "UpdateEnergiserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateEnergiser"
            }
          },
          "DeleteEnergiserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteEnergiser"
            }
          },
          "ListBootcamperLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listBootcamper"
            }
          },
          "BootcamperLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-bootcamper"
            }
          },
          "CreateBootcamperLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createBootcamper"
            }
          },
          "UpdateBootcamperLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateBootcamper"
            }
          },
          "DeleteBootcamperLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteBootcamper"
            }
          },
          "ListBootcamperPairsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listBootcamperPairs"
            }
          },
          "BootcamperPairsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-bootcamperPairs"
            }
          },
          "CreateBootcamperPairsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createBootcamperPairs"
            }
          },
          "UpdateBootcamperPairsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateBootcamperPairs"
            }
          },
          "DeleteBootcamperPairsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteBootcamperPairs"
            }
          },
          "ListBootcamperFoursLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listBootcamperFours"
            }
          },
          "BootcamperFoursLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-bootcamperFours"
            }
          },
          "CreateBootcamperFoursLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createBootcamperFours"
            }
          },
          "UpdateBootcamperFoursLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateBootcamperFours"
            }
          },
          "DeleteBootcamperFoursLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteBootcamperFours"
            }
          },
          "ListBootcamperEightsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listBootcamperEights"
            }
          },
          "BootcamperEightsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-bootcamperEights"
            }
          },
          "CreateBootcamperEightsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createBootcamperEights"
            }
          },
          "UpdateBootcamperEightsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateBootcamperEights"
            }
          },
          "DeleteBootcamperEightsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteBootcamperEights"
            }
          },
          "ListResourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listResource"
            }
          },
          "ResourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-resource"
            }
          },
          "CreateResourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createResource"
            }
          },
          "UpdateResourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateResource"
            }
          },
          "DeleteResourceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteResource"
            }
          },
          "ListRecordingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listRecordings"
            }
          },
          "RecordingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-recording"
            }
          },
          "CreateRecordingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createRecording"
            }
          },
          "UpdateRecordingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateRecording"
            }
          },
          "DeleteRecordingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteRecording"
            }
          },
          "ListWeekLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listWeek"
            }
          },
          "WeekLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-week"
            }
          },
          "CreateWeekLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createWeek"
            }
          },
          "UpdateWeekLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateWeek"
            }
          },
          "DeleteWeekLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteWeek"
            }
          },
          "ListEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listEvents"
            }
          },
          "EventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-event"
            }
          },
          "CreateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-createEvent"
            }
          },
          "UpdateEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-updateEvent"
            }
          },
          "DeleteEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-deleteEvent"
            }
          },
          "ListWeekEventsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/royal-code-dev-listWeekEvents"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "royal-code",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/royal-code-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/royal-code-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "royal-code",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": "arn:aws:iam::802587217904:root"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {
                      "StringEquals": {
                        "sts:ExternalId": "ServerlessEnterprise-da3c8eec-653e-4acb-a887-f0e86be8dabe"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "LogFilterAccess",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:FilterLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "ListEnergiserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "EnergiserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateEnergiserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateEnergiserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteEnergiserLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListBootcamperLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "BootcamperLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateBootcamperLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateBootcamperLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteBootcamperLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListBootcamperPairsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "BootcamperPairsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateBootcamperPairsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateBootcamperPairsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteBootcamperPairsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListBootcamperFoursLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "BootcamperFoursLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateBootcamperFoursLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateBootcamperFoursLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteBootcamperFoursLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListBootcamperEightsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "BootcamperEightsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateBootcamperEightsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateBootcamperEightsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteBootcamperEightsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListResourceLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ResourceLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateResourceLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateResourceLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteResourceLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListRecordingsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "RecordingLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateRecordingLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateRecordingLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteRecordingLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListWeekLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "WeekLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateWeekLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateWeekLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteWeekLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListEventsLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "EventLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "CreateEventLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "UpdateEventLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "DeleteEventLogGroup",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "ListWeekEventsLogGroup",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ListEnergiserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listEnergiser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listEnergiser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEnergiserLogGroup"
            ]
          },
          "EnergiserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_energiser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-energiser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EnergiserLogGroup"
            ]
          },
          "CreateEnergiserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createEnergiser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createEnergiser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEnergiserLogGroup"
            ]
          },
          "UpdateEnergiserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateEnergiser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateEnergiser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEnergiserLogGroup"
            ]
          },
          "DeleteEnergiserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteEnergiser.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteEnergiser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEnergiserLogGroup"
            ]
          },
          "ListBootcamperLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listBootcamper.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listBootcamper",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListBootcamperLogGroup"
            ]
          },
          "BootcamperLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_bootcamper.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-bootcamper",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BootcamperLogGroup"
            ]
          },
          "CreateBootcamperLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createBootcamper.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createBootcamper",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBootcamperLogGroup"
            ]
          },
          "UpdateBootcamperLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateBootcamper.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateBootcamper",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBootcamperLogGroup"
            ]
          },
          "DeleteBootcamperLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteBootcamper.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteBootcamper",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteBootcamperLogGroup"
            ]
          },
          "ListBootcamperPairsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listBootcamperPairs.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listBootcamperPairs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListBootcamperPairsLogGroup"
            ]
          },
          "BootcamperPairsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_bootcamperPairs.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-bootcamperPairs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BootcamperPairsLogGroup"
            ]
          },
          "CreateBootcamperPairsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createBootcamperPairs.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createBootcamperPairs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBootcamperPairsLogGroup"
            ]
          },
          "UpdateBootcamperPairsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateBootcamperPairs.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateBootcamperPairs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBootcamperPairsLogGroup"
            ]
          },
          "DeleteBootcamperPairsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteBootcamperPairs.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteBootcamperPairs",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteBootcamperPairsLogGroup"
            ]
          },
          "ListBootcamperFoursLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listBootcamperFours.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listBootcamperFours",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListBootcamperFoursLogGroup"
            ]
          },
          "BootcamperFoursLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_bootcamperFours.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-bootcamperFours",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BootcamperFoursLogGroup"
            ]
          },
          "CreateBootcamperFoursLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createBootcamperFours.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createBootcamperFours",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBootcamperFoursLogGroup"
            ]
          },
          "UpdateBootcamperFoursLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateBootcamperFours.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateBootcamperFours",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBootcamperFoursLogGroup"
            ]
          },
          "DeleteBootcamperFoursLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteBootcamperFours.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteBootcamperFours",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteBootcamperFoursLogGroup"
            ]
          },
          "ListBootcamperEightsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listBootcamperEights.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listBootcamperEights",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListBootcamperEightsLogGroup"
            ]
          },
          "BootcamperEightsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_bootcamperEights.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-bootcamperEights",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "BootcamperEightsLogGroup"
            ]
          },
          "CreateBootcamperEightsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createBootcamperEights.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createBootcamperEights",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateBootcamperEightsLogGroup"
            ]
          },
          "UpdateBootcamperEightsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateBootcamperEights.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateBootcamperEights",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateBootcamperEightsLogGroup"
            ]
          },
          "DeleteBootcamperEightsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteBootcamperEights.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteBootcamperEights",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteBootcamperEightsLogGroup"
            ]
          },
          "ListResourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listResource.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listResource",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListResourceLogGroup"
            ]
          },
          "ResourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_resource.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-resource",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ResourceLogGroup"
            ]
          },
          "CreateResourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createResource.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createResource",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateResourceLogGroup"
            ]
          },
          "UpdateResourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateResource.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateResource",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateResourceLogGroup"
            ]
          },
          "DeleteResourceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteResource.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteResource",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteResourceLogGroup"
            ]
          },
          "ListRecordingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listRecordings.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listRecordings",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListRecordingsLogGroup"
            ]
          },
          "RecordingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_recording.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-recording",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RecordingLogGroup"
            ]
          },
          "CreateRecordingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createRecording.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createRecording",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateRecordingLogGroup"
            ]
          },
          "UpdateRecordingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateRecording.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateRecording",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateRecordingLogGroup"
            ]
          },
          "DeleteRecordingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteRecording.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteRecording",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteRecordingLogGroup"
            ]
          },
          "ListWeekLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listWeek.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listWeek",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListWeekLogGroup"
            ]
          },
          "WeekLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_week.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-week",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WeekLogGroup"
            ]
          },
          "CreateWeekLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createWeek.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createWeek",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateWeekLogGroup"
            ]
          },
          "UpdateWeekLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateWeek.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateWeek",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateWeekLogGroup"
            ]
          },
          "DeleteWeekLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteWeek.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteWeek",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteWeekLogGroup"
            ]
          },
          "ListEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listEvents.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listEvents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListEventsLogGroup"
            ]
          },
          "EventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_event.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-event",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "EventLogGroup"
            ]
          },
          "CreateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_createEvent.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-createEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateEventLogGroup"
            ]
          },
          "UpdateEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_updateEvent.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-updateEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateEventLogGroup"
            ]
          },
          "DeleteEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_deleteEvent.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-deleteEvent",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteEventLogGroup"
            ]
          },
          "ListWeekEventsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/royal-code.zip"
              },
              "Handler": "s_listWeekEvents.handler",
              "Runtime": "nodejs14.x",
              "FunctionName": "royal-code-dev-listWeekEvents",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DYNAMODB_ENERGISER_TABLE": "energiser-table",
                  "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
                  "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
                  "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
                  "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
                  "DYNAMODB_RESOURCE_TABLE": "resource-table",
                  "DYNAMODB_RECORDING_TABLE": "recording-table",
                  "DYNAMODB_WEEK_TABLE": "week-table",
                  "DYNAMODB_EVENT_TABLE": "event-table",
                  "DOMAIN_SUFFIX": "royal-code"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListWeekEventsLogGroup"
            ]
          },
          "ListEnergiserLambdaVersionH6PI9olpUHg6uepanjMT03DYUHi9zDEBegF7tq0T0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEnergiserLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "EnergiserLambdaVersionnbC91IFl72YsoJ4g1IClhkezZgyKfMWhFO6pi64u4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EnergiserLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateEnergiserLambdaVersion1hJkXMXTSbfPlFvPTQbSVqqHh5f9l2UCpWEtvk3RSs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEnergiserLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateEnergiserLambdaVersionsIRXs1GjTByvuaNYvLw2CfCxy0kOczSnX0pkQtdnc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEnergiserLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteEnergiserLambdaVersion1KUhMtliuhihNbTyA4xfEJckaTTCtpSBi7vxQx5X8Ow": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEnergiserLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListBootcamperLambdaVersionPRS9W6MeYLf6O8ahR4keVjkuPZzeWnSqeKCuMrDhQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListBootcamperLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "BootcamperLambdaVersionsbKvCHURD1A3qR3C4EQEkr146iHAoOMIjgFPE0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BootcamperLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateBootcamperLambdaVersionowAudxxWOhmI9WpN5bCVJtgNwxeu7TNIf16ugX5CIw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBootcamperLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateBootcamperLambdaVersionjvH428Kf7xwhrioKUCAUS9235yE2tdL4LvwOyBqJqE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBootcamperLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteBootcamperLambdaVersionj1j8MZS0HoKrAAV1FIPlDHbWiQi0NodbhyORz5QWlWo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBootcamperLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListBootcamperPairsLambdaVersionECEj8VrxcwFcQplGmH3eAK9KUBqw86iTOPax852qkb4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListBootcamperPairsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "BootcamperPairsLambdaVersioniJTYughVax2isjpoXnBNlwFGDNZTntY0gDxUiZNfd5U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BootcamperPairsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateBootcamperPairsLambdaVersionoycG8pOj138JVQZ66Ai5uz2JstCc2mQa1wEMNqsh6w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBootcamperPairsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateBootcamperPairsLambdaVersionwL4t9hQI117XO1oTg4XmGRX04JreFHUsYc7xouliw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBootcamperPairsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteBootcamperPairsLambdaVersionWbvzQLkiphdTLKqCfdshpkHnf9DEHyNF06ZIQoYI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBootcamperPairsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListBootcamperFoursLambdaVersionJqlxAytIOykuFmjxnlkyFZwVfpgTR0R4z278UTMY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListBootcamperFoursLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "BootcamperFoursLambdaVersionHdrKdX6C2WMJIGHgSBpD8D50lhcEj2scxBKJw8Zdqg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BootcamperFoursLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateBootcamperFoursLambdaVersion6sP1jLVzzEBnHg8tlaMOZEz0SemNww0bDTHZZWIxJZ0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBootcamperFoursLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateBootcamperFoursLambdaVersionhrIWgp4yLf2CriVblx1huybNrIKY8n2XBZxFinjkt4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBootcamperFoursLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteBootcamperFoursLambdaVersionYzAKgGp9WnQFie6MPjLuQi2nSOlfktZyENagPtQE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBootcamperFoursLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListBootcamperEightsLambdaVersionwwCIUe09bXximBoNGavbm8tyx1sCQYg6AKKraqnAnA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListBootcamperEightsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "BootcamperEightsLambdaVersionQ5rshSZia05RQZtlteBZmI8K1gU4419GTN13OaxUfQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BootcamperEightsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateBootcamperEightsLambdaVersionNW6oFwbX7gT0yqc7RSo3INSzFdcC8FAI5s73uDlk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateBootcamperEightsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateBootcamperEightsLambdaVersionmLIwBXrFG4DdqaLSVnPoEFQuoLj9I37oZfapKcXzY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateBootcamperEightsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteBootcamperEightsLambdaVersion7CZB7iqLTl9YEBft4EfzQB5OyQKitbVW899vGi09xo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteBootcamperEightsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListResourceLambdaVersionsvQD01rMbGgeENFtQNh0TZlQi8uPUc0Ge8GwGQTcy4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListResourceLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ResourceLambdaVersionpos5c8JtHQxtMLCpGRFMMdOBReunxLk2YKf72pUYu0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ResourceLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateResourceLambdaVersiontmtzgIGJf64xrL8T04F0UZ5ZbV7GTGNwsO9sQt95uRQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateResourceLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateResourceLambdaVersionYCkkiUYr8nD6PsyaxmPyo6Z2CqwfPfEAQzSr4FDCFk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateResourceLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteResourceLambdaVersion3u7d4EAZToDgnGlpB7PB7eTukH6XBLZF6hkmCioHmE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteResourceLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListRecordingsLambdaVersionLfhIJBhTK9yUr1aJqEK9lCuqxH8uSNKCS7IJf2yDo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListRecordingsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "RecordingLambdaVersionzywOcEZCi4nrU7mcCeFMAdXKEReQmD5CkHqXM3R2EJk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RecordingLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateRecordingLambdaVersion6bBR9PRS7walpghxgXwQ63rCDIosA9jSSkklTG3Kxo4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateRecordingLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateRecordingLambdaVersioncTZkV0UlK32r9X7zhRI4RIv5nEG0l9NWryM2Bb2L4E": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateRecordingLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteRecordingLambdaVersion3gCdMjCFOwa9cyg1CWcebNDt17ikYYuYOHtsof18": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteRecordingLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListWeekLambdaVersionSVoarSPoDewdm1nOuzTDxFC8YC4U51h5HLyiB5rbU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListWeekLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "WeekLambdaVersionvG0EniikB2o1tu1LbJMG4phBsPBApzbkrsQWPjRjk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WeekLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateWeekLambdaVersionBN6stSfHmt9DRqh5Zrf2TYLR2R0aopqR7PE1b27bmU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateWeekLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateWeekLambdaVersionFcIuNaOudsKnP1YBvDqPuG81ZST38mvL4kNuHmPIU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateWeekLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteWeekLambdaVersionIggqlhEuuqWsqbftQqid1r51Kl05RyKPsexIeRBLzw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteWeekLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListEventsLambdaVersionf1n6YUZos8PKMSMcwttzLNrJWuhRmVuIXgJNyNvVyQY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListEventsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "EventLambdaVersionPruEo9xbPQIdausETEIdl9CUXfOrt1atG8uoZKJOI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "EventLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "CreateEventLambdaVersion8vTeLhFBFjugSE2EZyBZdSIU07eT9wDdY22PIJPCYp0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateEventLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "UpdateEventLambdaVersionpfd0JEepNTdnkcWARGUT0ETedgiDtxtHVv3BNsLuy8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateEventLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "DeleteEventLambdaVersioniUYc5dbI9brvFnxaL2a3IhrhXU27Ble6yMxzy05c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteEventLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ListWeekEventsLambdaVersion7fqO2MNB8Mp1QsUHwHYrC80QxUu1vw2PgELVvuKQ0Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListWeekEventsLambdaFunction"
              },
              "CodeSha256": "b1h1VNT1YsK2FckNsRhSOmioC+TigIGH7jKCfwxUWT8="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-royal-code",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceEnergisers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "energisers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEnergisersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEnergisers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcampers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bootcampers",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcampersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBootcampers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDashpairs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bootcamper-pairs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDashpairsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairs"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDashfours": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bootcamper-fours",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDashfoursIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBootcamperDashfours"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDasheights": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "bootcamper-eights",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceBootcamperDasheightsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceBootcamperDasheights"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResources": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "resources",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceResourcesIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRecordings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "recordings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRecordingsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceRecordings"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWeeks": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "weeks",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWeeksIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWeeks"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEvents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEventsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWeekDashevents": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "week-events",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWeekDasheventsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWeekDashevents"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEnergisersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEnergisersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcampersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcampersIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDashpairsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDashpairsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDashfoursOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfours"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDashfoursIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfoursIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDasheightsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheights"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodBootcamperDasheightsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheightsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResourcesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodResourcesIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRecordingsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRecordingsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWeeksOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWeeksIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeksIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEventsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWeekDasheventsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeekDasheventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEnergisersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEnergiserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListEnergiserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEnergisersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EnergiserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "EnergiserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEnergisersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEnergiserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEnergiserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEnergisersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEnergiserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateEnergiserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEnergisersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEnergisersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteEnergiserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteEnergiserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcampersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListBootcamperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListBootcamperLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcampersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BootcamperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BootcamperLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcampersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBootcamperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBootcamperLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcampersIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBootcamperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateBootcamperLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcampersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcampersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBootcamperLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteBootcamperLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashpairsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListBootcamperPairsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListBootcamperPairsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashpairsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BootcamperPairsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BootcamperPairsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashpairsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBootcamperPairsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBootcamperPairsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashpairsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBootcamperPairsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateBootcamperPairsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashpairsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashpairsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBootcamperPairsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteBootcamperPairsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashfoursGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfours"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListBootcamperFoursLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListBootcamperFoursLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashfoursIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfoursIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BootcamperFoursLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BootcamperFoursLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashfoursPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfours"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBootcamperFoursLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBootcamperFoursLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashfoursIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfoursIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBootcamperFoursLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateBootcamperFoursLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDashfoursIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDashfoursIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBootcamperFoursLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteBootcamperFoursLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDasheightsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheights"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListBootcamperEightsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListBootcamperEightsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDasheightsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheightsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "BootcamperEightsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BootcamperEightsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDasheightsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheights"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateBootcamperEightsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateBootcamperEightsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDasheightsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheightsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateBootcamperEightsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateBootcamperEightsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodBootcamperDasheightsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceBootcamperDasheightsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteBootcamperEightsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteBootcamperEightsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListResourceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListResourceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ResourceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ResourceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResources"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateResourceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateResourceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateResourceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateResourceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodResourcesIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceResourcesIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteResourceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteResourceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRecordingsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListRecordingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListRecordingsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRecordingsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RecordingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RecordingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRecordingsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordings"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateRecordingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateRecordingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRecordingsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateRecordingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateRecordingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRecordingsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRecordingsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteRecordingLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteRecordingLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeeksGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListWeekLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListWeekLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeeksIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeksIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WeekLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WeekLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeeksPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeks"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateWeekLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateWeekLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeeksIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeksIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateWeekLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateWeekLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeeksIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeeksIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteWeekLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteWeekLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "EventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "EventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEvents"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEventsIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteEventLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "DeleteEventLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWeekDasheventsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWeekDasheventsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListWeekEventsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListWeekEventsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1636475353979": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodEnergisersOptions",
              "ApiGatewayMethodEnergisersIdVarOptions",
              "ApiGatewayMethodBootcampersOptions",
              "ApiGatewayMethodBootcampersIdVarOptions",
              "ApiGatewayMethodBootcamperDashpairsOptions",
              "ApiGatewayMethodBootcamperDashpairsIdVarOptions",
              "ApiGatewayMethodBootcamperDashfoursOptions",
              "ApiGatewayMethodBootcamperDashfoursIdVarOptions",
              "ApiGatewayMethodBootcamperDasheightsOptions",
              "ApiGatewayMethodBootcamperDasheightsIdVarOptions",
              "ApiGatewayMethodResourcesOptions",
              "ApiGatewayMethodResourcesIdVarOptions",
              "ApiGatewayMethodRecordingsOptions",
              "ApiGatewayMethodRecordingsIdVarOptions",
              "ApiGatewayMethodWeeksOptions",
              "ApiGatewayMethodWeeksIdVarOptions",
              "ApiGatewayMethodEventsOptions",
              "ApiGatewayMethodEventsIdVarOptions",
              "ApiGatewayMethodWeekDasheventsIdVarOptions",
              "ApiGatewayMethodEnergisersGet",
              "ApiGatewayMethodEnergisersIdVarGet",
              "ApiGatewayMethodEnergisersPost",
              "ApiGatewayMethodEnergisersIdVarPut",
              "ApiGatewayMethodEnergisersIdVarDelete",
              "ApiGatewayMethodBootcampersGet",
              "ApiGatewayMethodBootcampersIdVarGet",
              "ApiGatewayMethodBootcampersPost",
              "ApiGatewayMethodBootcampersIdVarPut",
              "ApiGatewayMethodBootcampersIdVarDelete",
              "ApiGatewayMethodBootcamperDashpairsGet",
              "ApiGatewayMethodBootcamperDashpairsIdVarGet",
              "ApiGatewayMethodBootcamperDashpairsPost",
              "ApiGatewayMethodBootcamperDashpairsIdVarPut",
              "ApiGatewayMethodBootcamperDashpairsIdVarDelete",
              "ApiGatewayMethodBootcamperDashfoursGet",
              "ApiGatewayMethodBootcamperDashfoursIdVarGet",
              "ApiGatewayMethodBootcamperDashfoursPost",
              "ApiGatewayMethodBootcamperDashfoursIdVarPut",
              "ApiGatewayMethodBootcamperDashfoursIdVarDelete",
              "ApiGatewayMethodBootcamperDasheightsGet",
              "ApiGatewayMethodBootcamperDasheightsIdVarGet",
              "ApiGatewayMethodBootcamperDasheightsPost",
              "ApiGatewayMethodBootcamperDasheightsIdVarPut",
              "ApiGatewayMethodBootcamperDasheightsIdVarDelete",
              "ApiGatewayMethodResourcesGet",
              "ApiGatewayMethodResourcesIdVarGet",
              "ApiGatewayMethodResourcesPost",
              "ApiGatewayMethodResourcesIdVarPut",
              "ApiGatewayMethodResourcesIdVarDelete",
              "ApiGatewayMethodRecordingsGet",
              "ApiGatewayMethodRecordingsIdVarGet",
              "ApiGatewayMethodRecordingsPost",
              "ApiGatewayMethodRecordingsIdVarPut",
              "ApiGatewayMethodRecordingsIdVarDelete",
              "ApiGatewayMethodWeeksGet",
              "ApiGatewayMethodWeeksIdVarGet",
              "ApiGatewayMethodWeeksPost",
              "ApiGatewayMethodWeeksIdVarPut",
              "ApiGatewayMethodWeeksIdVarDelete",
              "ApiGatewayMethodEventsGet",
              "ApiGatewayMethodEventsIdVarGet",
              "ApiGatewayMethodEventsPost",
              "ApiGatewayMethodEventsIdVarPut",
              "ApiGatewayMethodEventsIdVarDelete",
              "ApiGatewayMethodWeekDasheventsIdVarGet"
            ]
          },
          "ListEnergiserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEnergiserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EnergiserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EnergiserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEnergiserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEnergiserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEnergiserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEnergiserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteEnergiserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEnergiserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListBootcamperLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListBootcamperLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BootcamperLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BootcamperLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBootcamperLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBootcamperLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBootcamperLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBootcamperLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBootcamperLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBootcamperLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListBootcamperPairsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListBootcamperPairsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BootcamperPairsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BootcamperPairsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBootcamperPairsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBootcamperPairsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBootcamperPairsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBootcamperPairsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBootcamperPairsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBootcamperPairsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListBootcamperFoursLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListBootcamperFoursLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BootcamperFoursLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BootcamperFoursLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBootcamperFoursLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBootcamperFoursLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBootcamperFoursLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBootcamperFoursLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBootcamperFoursLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBootcamperFoursLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListBootcamperEightsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListBootcamperEightsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BootcamperEightsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BootcamperEightsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateBootcamperEightsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateBootcamperEightsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateBootcamperEightsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateBootcamperEightsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteBootcamperEightsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteBootcamperEightsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListResourceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListResourceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ResourceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ResourceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateResourceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateResourceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateResourceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateResourceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteResourceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteResourceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListRecordingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListRecordingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RecordingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RecordingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateRecordingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateRecordingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateRecordingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateRecordingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteRecordingLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteRecordingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListWeekLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListWeekLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WeekLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WeekLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateWeekLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateWeekLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateWeekLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateWeekLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteWeekLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteWeekLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "EventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "EventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteEventLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteEventLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListWeekEventsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListWeekEventsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/royal-code-dev"
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "royal-code",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z/custom-resources.zip"
              },
              "FunctionName": "royal-code-dev-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "DynamoDbEnergiserTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "energiser-table"
            }
          },
          "DynamoDbBootcamperTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "bootcamper-table"
            }
          },
          "DynamoDbResourceTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "resource-table"
            }
          },
          "DynamoDbRecordingTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "recording-table"
            }
          },
          "DynamoDbBootcamperPairTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "bootcamper-2-table"
            }
          },
          "DynamoDbBootcamperFourTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "bootcamper-4-table"
            }
          },
          "DynamoDbBootcamperEightTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "bootcamper-8-table"
            }
          },
          "DynamoDbWeekTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "week-table"
            }
          },
          "DynamoDbEventTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "event-table"
            }
          },
          "CWLSubFilterListEnergiserLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListEnergiserLogGroup"
              }
            }
          },
          "CWLSubFilterEnergiserLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "EnergiserLogGroup"
              }
            }
          },
          "CWLSubFilterCreateEnergiserLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateEnergiserLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateEnergiserLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateEnergiserLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteEnergiserLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteEnergiserLogGroup"
              }
            }
          },
          "CWLSubFilterListBootcamperLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListBootcamperLogGroup"
              }
            }
          },
          "CWLSubFilterBootcamperLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "BootcamperLogGroup"
              }
            }
          },
          "CWLSubFilterCreateBootcamperLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateBootcamperLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateBootcamperLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateBootcamperLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteBootcamperLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteBootcamperLogGroup"
              }
            }
          },
          "CWLSubFilterListBootcamperPairsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListBootcamperPairsLogGroup"
              }
            }
          },
          "CWLSubFilterBootcamperPairsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "BootcamperPairsLogGroup"
              }
            }
          },
          "CWLSubFilterCreateBootcamperPairsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateBootcamperPairsLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateBootcamperPairsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateBootcamperPairsLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteBootcamperPairsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteBootcamperPairsLogGroup"
              }
            }
          },
          "CWLSubFilterListBootcamperFoursLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListBootcamperFoursLogGroup"
              }
            }
          },
          "CWLSubFilterBootcamperFoursLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "BootcamperFoursLogGroup"
              }
            }
          },
          "CWLSubFilterCreateBootcamperFoursLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateBootcamperFoursLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateBootcamperFoursLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateBootcamperFoursLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteBootcamperFoursLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteBootcamperFoursLogGroup"
              }
            }
          },
          "CWLSubFilterListBootcamperEightsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListBootcamperEightsLogGroup"
              }
            }
          },
          "CWLSubFilterBootcamperEightsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "BootcamperEightsLogGroup"
              }
            }
          },
          "CWLSubFilterCreateBootcamperEightsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateBootcamperEightsLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateBootcamperEightsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateBootcamperEightsLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteBootcamperEightsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteBootcamperEightsLogGroup"
              }
            }
          },
          "CWLSubFilterListResourceLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListResourceLogGroup"
              }
            }
          },
          "CWLSubFilterResourceLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ResourceLogGroup"
              }
            }
          },
          "CWLSubFilterCreateResourceLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateResourceLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateResourceLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateResourceLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteResourceLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteResourceLogGroup"
              }
            }
          },
          "CWLSubFilterListRecordingsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListRecordingsLogGroup"
              }
            }
          },
          "CWLSubFilterRecordingLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "RecordingLogGroup"
              }
            }
          },
          "CWLSubFilterCreateRecordingLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateRecordingLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateRecordingLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateRecordingLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteRecordingLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteRecordingLogGroup"
              }
            }
          },
          "CWLSubFilterListWeekLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListWeekLogGroup"
              }
            }
          },
          "CWLSubFilterWeekLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "WeekLogGroup"
              }
            }
          },
          "CWLSubFilterCreateWeekLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateWeekLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateWeekLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateWeekLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteWeekLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteWeekLogGroup"
              }
            }
          },
          "CWLSubFilterListEventsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListEventsLogGroup"
              }
            }
          },
          "CWLSubFilterEventLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "EventLogGroup"
              }
            }
          },
          "CWLSubFilterCreateEventLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "CreateEventLogGroup"
              }
            }
          },
          "CWLSubFilterUpdateEventLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "UpdateEventLogGroup"
              }
            }
          },
          "CWLSubFilterDeleteEventLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "DeleteEventLogGroup"
              }
            }
          },
          "CWLSubFilterListWeekEventsLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "?\"REPORT RequestId: \" ?\"SERVERLESS_ENTERPRISE\"",
              "LogGroupName": {
                "Ref": "ListWeekEventsLogGroup"
              }
            }
          },
          "CWLSubFilterApiGatewayLogGroupEuWest1": {
            "Type": "AWS::Logs::SubscriptionFilter",
            "Properties": {
              "DestinationArn": "arn:aws:logs:eu-west-1:802587217904:destination:da3c8eec-653e-4acb-a887-f0e86be8dabe#Mcplx7LrLRg6Fkf5C1#royal-code#dev",
              "FilterPattern": "\"SLS_ACCESS_LOG\"",
              "LogGroupName": {
                "Ref": "ApiGatewayLogGroup"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ServerlessDeploymentBucketName"
            }
          },
          "EnterpriseLogAccessIamRole": {
            "Value": {
              "Fn::GetAtt": [
                "EnterpriseLogAccessIamRole",
                "Arn"
              ]
            },
            "Export": {
              "Name": "sls-royal-code-dev-EnterpriseLogAccessIamRole"
            }
          },
          "ListEnergiserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEnergiserLambdaVersionH6PI9olpUHg6uepanjMT03DYUHi9zDEBegF7tq0T0"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListEnergiserLambdaFunctionQualifiedArn"
            }
          },
          "EnergiserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EnergiserLambdaVersionnbC91IFl72YsoJ4g1IClhkezZgyKfMWhFO6pi64u4"
            },
            "Export": {
              "Name": "sls-royal-code-dev-EnergiserLambdaFunctionQualifiedArn"
            }
          },
          "CreateEnergiserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEnergiserLambdaVersion1hJkXMXTSbfPlFvPTQbSVqqHh5f9l2UCpWEtvk3RSs"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateEnergiserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEnergiserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEnergiserLambdaVersionsIRXs1GjTByvuaNYvLw2CfCxy0kOczSnX0pkQtdnc"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateEnergiserLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEnergiserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEnergiserLambdaVersion1KUhMtliuhihNbTyA4xfEJckaTTCtpSBi7vxQx5X8Ow"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteEnergiserLambdaFunctionQualifiedArn"
            }
          },
          "ListBootcamperLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListBootcamperLambdaVersionPRS9W6MeYLf6O8ahR4keVjkuPZzeWnSqeKCuMrDhQ"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListBootcamperLambdaFunctionQualifiedArn"
            }
          },
          "BootcamperLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BootcamperLambdaVersionsbKvCHURD1A3qR3C4EQEkr146iHAoOMIjgFPE0"
            },
            "Export": {
              "Name": "sls-royal-code-dev-BootcamperLambdaFunctionQualifiedArn"
            }
          },
          "CreateBootcamperLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBootcamperLambdaVersionowAudxxWOhmI9WpN5bCVJtgNwxeu7TNIf16ugX5CIw"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateBootcamperLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBootcamperLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBootcamperLambdaVersionjvH428Kf7xwhrioKUCAUS9235yE2tdL4LvwOyBqJqE"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateBootcamperLambdaFunctionQualifiedArn"
            }
          },
          "DeleteBootcamperLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBootcamperLambdaVersionj1j8MZS0HoKrAAV1FIPlDHbWiQi0NodbhyORz5QWlWo"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteBootcamperLambdaFunctionQualifiedArn"
            }
          },
          "ListBootcamperPairsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListBootcamperPairsLambdaVersionECEj8VrxcwFcQplGmH3eAK9KUBqw86iTOPax852qkb4"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListBootcamperPairsLambdaFunctionQualifiedArn"
            }
          },
          "BootcamperPairsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BootcamperPairsLambdaVersioniJTYughVax2isjpoXnBNlwFGDNZTntY0gDxUiZNfd5U"
            },
            "Export": {
              "Name": "sls-royal-code-dev-BootcamperPairsLambdaFunctionQualifiedArn"
            }
          },
          "CreateBootcamperPairsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBootcamperPairsLambdaVersionoycG8pOj138JVQZ66Ai5uz2JstCc2mQa1wEMNqsh6w"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateBootcamperPairsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBootcamperPairsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBootcamperPairsLambdaVersionwL4t9hQI117XO1oTg4XmGRX04JreFHUsYc7xouliw"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateBootcamperPairsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteBootcamperPairsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBootcamperPairsLambdaVersionWbvzQLkiphdTLKqCfdshpkHnf9DEHyNF06ZIQoYI"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteBootcamperPairsLambdaFunctionQualifiedArn"
            }
          },
          "ListBootcamperFoursLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListBootcamperFoursLambdaVersionJqlxAytIOykuFmjxnlkyFZwVfpgTR0R4z278UTMY"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListBootcamperFoursLambdaFunctionQualifiedArn"
            }
          },
          "BootcamperFoursLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BootcamperFoursLambdaVersionHdrKdX6C2WMJIGHgSBpD8D50lhcEj2scxBKJw8Zdqg"
            },
            "Export": {
              "Name": "sls-royal-code-dev-BootcamperFoursLambdaFunctionQualifiedArn"
            }
          },
          "CreateBootcamperFoursLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBootcamperFoursLambdaVersion6sP1jLVzzEBnHg8tlaMOZEz0SemNww0bDTHZZWIxJZ0"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateBootcamperFoursLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBootcamperFoursLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBootcamperFoursLambdaVersionhrIWgp4yLf2CriVblx1huybNrIKY8n2XBZxFinjkt4"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateBootcamperFoursLambdaFunctionQualifiedArn"
            }
          },
          "DeleteBootcamperFoursLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBootcamperFoursLambdaVersionYzAKgGp9WnQFie6MPjLuQi2nSOlfktZyENagPtQE"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteBootcamperFoursLambdaFunctionQualifiedArn"
            }
          },
          "ListBootcamperEightsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListBootcamperEightsLambdaVersionwwCIUe09bXximBoNGavbm8tyx1sCQYg6AKKraqnAnA"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListBootcamperEightsLambdaFunctionQualifiedArn"
            }
          },
          "BootcamperEightsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BootcamperEightsLambdaVersionQ5rshSZia05RQZtlteBZmI8K1gU4419GTN13OaxUfQ"
            },
            "Export": {
              "Name": "sls-royal-code-dev-BootcamperEightsLambdaFunctionQualifiedArn"
            }
          },
          "CreateBootcamperEightsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateBootcamperEightsLambdaVersionNW6oFwbX7gT0yqc7RSo3INSzFdcC8FAI5s73uDlk"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateBootcamperEightsLambdaFunctionQualifiedArn"
            }
          },
          "UpdateBootcamperEightsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateBootcamperEightsLambdaVersionmLIwBXrFG4DdqaLSVnPoEFQuoLj9I37oZfapKcXzY"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateBootcamperEightsLambdaFunctionQualifiedArn"
            }
          },
          "DeleteBootcamperEightsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteBootcamperEightsLambdaVersion7CZB7iqLTl9YEBft4EfzQB5OyQKitbVW899vGi09xo"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteBootcamperEightsLambdaFunctionQualifiedArn"
            }
          },
          "ListResourceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListResourceLambdaVersionsvQD01rMbGgeENFtQNh0TZlQi8uPUc0Ge8GwGQTcy4"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListResourceLambdaFunctionQualifiedArn"
            }
          },
          "ResourceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ResourceLambdaVersionpos5c8JtHQxtMLCpGRFMMdOBReunxLk2YKf72pUYu0"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ResourceLambdaFunctionQualifiedArn"
            }
          },
          "CreateResourceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateResourceLambdaVersiontmtzgIGJf64xrL8T04F0UZ5ZbV7GTGNwsO9sQt95uRQ"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateResourceLambdaFunctionQualifiedArn"
            }
          },
          "UpdateResourceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateResourceLambdaVersionYCkkiUYr8nD6PsyaxmPyo6Z2CqwfPfEAQzSr4FDCFk"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateResourceLambdaFunctionQualifiedArn"
            }
          },
          "DeleteResourceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteResourceLambdaVersion3u7d4EAZToDgnGlpB7PB7eTukH6XBLZF6hkmCioHmE"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteResourceLambdaFunctionQualifiedArn"
            }
          },
          "ListRecordingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListRecordingsLambdaVersionLfhIJBhTK9yUr1aJqEK9lCuqxH8uSNKCS7IJf2yDo"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListRecordingsLambdaFunctionQualifiedArn"
            }
          },
          "RecordingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RecordingLambdaVersionzywOcEZCi4nrU7mcCeFMAdXKEReQmD5CkHqXM3R2EJk"
            },
            "Export": {
              "Name": "sls-royal-code-dev-RecordingLambdaFunctionQualifiedArn"
            }
          },
          "CreateRecordingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateRecordingLambdaVersion6bBR9PRS7walpghxgXwQ63rCDIosA9jSSkklTG3Kxo4"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateRecordingLambdaFunctionQualifiedArn"
            }
          },
          "UpdateRecordingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateRecordingLambdaVersioncTZkV0UlK32r9X7zhRI4RIv5nEG0l9NWryM2Bb2L4E"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateRecordingLambdaFunctionQualifiedArn"
            }
          },
          "DeleteRecordingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteRecordingLambdaVersion3gCdMjCFOwa9cyg1CWcebNDt17ikYYuYOHtsof18"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteRecordingLambdaFunctionQualifiedArn"
            }
          },
          "ListWeekLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListWeekLambdaVersionSVoarSPoDewdm1nOuzTDxFC8YC4U51h5HLyiB5rbU"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListWeekLambdaFunctionQualifiedArn"
            }
          },
          "WeekLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WeekLambdaVersionvG0EniikB2o1tu1LbJMG4phBsPBApzbkrsQWPjRjk"
            },
            "Export": {
              "Name": "sls-royal-code-dev-WeekLambdaFunctionQualifiedArn"
            }
          },
          "CreateWeekLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateWeekLambdaVersionBN6stSfHmt9DRqh5Zrf2TYLR2R0aopqR7PE1b27bmU"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateWeekLambdaFunctionQualifiedArn"
            }
          },
          "UpdateWeekLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateWeekLambdaVersionFcIuNaOudsKnP1YBvDqPuG81ZST38mvL4kNuHmPIU"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateWeekLambdaFunctionQualifiedArn"
            }
          },
          "DeleteWeekLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteWeekLambdaVersionIggqlhEuuqWsqbftQqid1r51Kl05RyKPsexIeRBLzw"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteWeekLambdaFunctionQualifiedArn"
            }
          },
          "ListEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListEventsLambdaVersionf1n6YUZos8PKMSMcwttzLNrJWuhRmVuIXgJNyNvVyQY"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListEventsLambdaFunctionQualifiedArn"
            }
          },
          "EventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "EventLambdaVersionPruEo9xbPQIdausETEIdl9CUXfOrt1atG8uoZKJOI"
            },
            "Export": {
              "Name": "sls-royal-code-dev-EventLambdaFunctionQualifiedArn"
            }
          },
          "CreateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateEventLambdaVersion8vTeLhFBFjugSE2EZyBZdSIU07eT9wDdY22PIJPCYp0"
            },
            "Export": {
              "Name": "sls-royal-code-dev-CreateEventLambdaFunctionQualifiedArn"
            }
          },
          "UpdateEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateEventLambdaVersionpfd0JEepNTdnkcWARGUT0ETedgiDtxtHVv3BNsLuy8"
            },
            "Export": {
              "Name": "sls-royal-code-dev-UpdateEventLambdaFunctionQualifiedArn"
            }
          },
          "DeleteEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteEventLambdaVersioniUYc5dbI9brvFnxaL2a3IhrhXU27Ble6yMxzy05c"
            },
            "Export": {
              "Name": "sls-royal-code-dev-DeleteEventLambdaFunctionQualifiedArn"
            }
          },
          "ListWeekEventsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListWeekEventsLambdaVersion7fqO2MNB8Mp1QsUHwHYrC80QxUu1vw2PgELVvuKQ0Q"
            },
            "Export": {
              "Name": "sls-royal-code-dev-ListWeekEventsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-royal-code-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "logs": {
        "restApi": {
          "format": "{\"requestTime\":\"$context.requestTime\",\"requestId\":\"$context.requestId\",\"apiId\":\"$context.apiId\",\"resourceId\":\"$context.resourceId\",\"resourcePath\":\"$context.resourcePath\",\"path\":\"$context.path\",\"httpMethod\":\"$context.httpMethod\",\"status\":\"$context.status\",\"authLatency\":\"$context.authorizer.integrationLatency\",\"integrationLatency\":\"$context.integrationLatency\",\"integrationStatus\":\"$context.integrationStatus\",\"responseLatency\":\"$context.responseLatency\",\"responseLength\":\"$context.responseLength\",\"errorMessage\":\"$context.error.message\",\"format\":\"SLS_ACCESS_LOG\",\"version\":\"1.0.0\"}"
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "DYNAMODB_ENERGISER_TABLE": "energiser-table",
        "DYNAMODB_BOOTCAMPER_TABLE": "bootcamper-table",
        "DYNAMODB_BOOTCAMPER_2_TABLE": "bootcamper-2-table",
        "DYNAMODB_BOOTCAMPER_4_TABLE": "bootcamper-4-table",
        "DYNAMODB_BOOTCAMPER_8_TABLE": "bootcamper-8-table",
        "DYNAMODB_RESOURCE_TABLE": "resource-table",
        "DYNAMODB_RECORDING_TABLE": "recording-table",
        "DYNAMODB_WEEK_TABLE": "week-table",
        "DYNAMODB_EVENT_TABLE": "event-table",
        "DOMAIN_SUFFIX": "royal-code"
      }
    },
    "pluginsData": {},
    "functions": {
      "listEnergiser": {
        "handler": "s_listEnergiser.handler",
        "events": [
          {
            "http": {
              "path": "energisers",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listEnergiser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListEnergiserLambdaVersionH6PI9olpUHg6uepanjMT03DYUHi9zDEBegF7tq0T0"
      },
      "energiser": {
        "handler": "s_energiser.handler",
        "events": [
          {
            "http": {
              "path": "energisers/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-energiser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EnergiserLambdaVersionnbC91IFl72YsoJ4g1IClhkezZgyKfMWhFO6pi64u4"
      },
      "createEnergiser": {
        "handler": "s_createEnergiser.handler",
        "events": [
          {
            "http": {
              "path": "energisers",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createEnergiser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateEnergiserLambdaVersion1hJkXMXTSbfPlFvPTQbSVqqHh5f9l2UCpWEtvk3RSs"
      },
      "updateEnergiser": {
        "handler": "s_updateEnergiser.handler",
        "events": [
          {
            "http": {
              "path": "energisers/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateEnergiser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateEnergiserLambdaVersionsIRXs1GjTByvuaNYvLw2CfCxy0kOczSnX0pkQtdnc"
      },
      "deleteEnergiser": {
        "handler": "s_deleteEnergiser.handler",
        "events": [
          {
            "http": {
              "path": "energisers/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteEnergiser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteEnergiserLambdaVersion1KUhMtliuhihNbTyA4xfEJckaTTCtpSBi7vxQx5X8Ow"
      },
      "listBootcamper": {
        "handler": "s_listBootcamper.handler",
        "events": [
          {
            "http": {
              "path": "bootcampers",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listBootcamper",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListBootcamperLambdaVersionPRS9W6MeYLf6O8ahR4keVjkuPZzeWnSqeKCuMrDhQ"
      },
      "bootcamper": {
        "handler": "s_bootcamper.handler",
        "events": [
          {
            "http": {
              "path": "bootcampers/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-bootcamper",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "BootcamperLambdaVersionsbKvCHURD1A3qR3C4EQEkr146iHAoOMIjgFPE0"
      },
      "createBootcamper": {
        "handler": "s_createBootcamper.handler",
        "events": [
          {
            "http": {
              "path": "bootcampers",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createBootcamper",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateBootcamperLambdaVersionowAudxxWOhmI9WpN5bCVJtgNwxeu7TNIf16ugX5CIw"
      },
      "updateBootcamper": {
        "handler": "s_updateBootcamper.handler",
        "events": [
          {
            "http": {
              "path": "bootcampers/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateBootcamper",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateBootcamperLambdaVersionjvH428Kf7xwhrioKUCAUS9235yE2tdL4LvwOyBqJqE"
      },
      "deleteBootcamper": {
        "handler": "s_deleteBootcamper.handler",
        "events": [
          {
            "http": {
              "path": "bootcampers/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteBootcamper",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteBootcamperLambdaVersionj1j8MZS0HoKrAAV1FIPlDHbWiQi0NodbhyORz5QWlWo"
      },
      "listBootcamperPairs": {
        "handler": "s_listBootcamperPairs.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-pairs",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listBootcamperPairs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListBootcamperPairsLambdaVersionECEj8VrxcwFcQplGmH3eAK9KUBqw86iTOPax852qkb4"
      },
      "bootcamperPairs": {
        "handler": "s_bootcamperPairs.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-pairs/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-bootcamperPairs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "BootcamperPairsLambdaVersioniJTYughVax2isjpoXnBNlwFGDNZTntY0gDxUiZNfd5U"
      },
      "createBootcamperPairs": {
        "handler": "s_createBootcamperPairs.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-pairs",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createBootcamperPairs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateBootcamperPairsLambdaVersionoycG8pOj138JVQZ66Ai5uz2JstCc2mQa1wEMNqsh6w"
      },
      "updateBootcamperPairs": {
        "handler": "s_updateBootcamperPairs.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-pairs/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateBootcamperPairs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateBootcamperPairsLambdaVersionwL4t9hQI117XO1oTg4XmGRX04JreFHUsYc7xouliw"
      },
      "deleteBootcamperPairs": {
        "handler": "s_deleteBootcamperPairs.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-pairs/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteBootcamperPairs",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteBootcamperPairsLambdaVersionWbvzQLkiphdTLKqCfdshpkHnf9DEHyNF06ZIQoYI"
      },
      "listBootcamperFours": {
        "handler": "s_listBootcamperFours.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-fours",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listBootcamperFours",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListBootcamperFoursLambdaVersionJqlxAytIOykuFmjxnlkyFZwVfpgTR0R4z278UTMY"
      },
      "bootcamperFours": {
        "handler": "s_bootcamperFours.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-fours/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-bootcamperFours",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "BootcamperFoursLambdaVersionHdrKdX6C2WMJIGHgSBpD8D50lhcEj2scxBKJw8Zdqg"
      },
      "createBootcamperFours": {
        "handler": "s_createBootcamperFours.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-fours",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createBootcamperFours",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateBootcamperFoursLambdaVersion6sP1jLVzzEBnHg8tlaMOZEz0SemNww0bDTHZZWIxJZ0"
      },
      "updateBootcamperFours": {
        "handler": "s_updateBootcamperFours.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-fours/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateBootcamperFours",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateBootcamperFoursLambdaVersionhrIWgp4yLf2CriVblx1huybNrIKY8n2XBZxFinjkt4"
      },
      "deleteBootcamperFours": {
        "handler": "s_deleteBootcamperFours.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-fours/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteBootcamperFours",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteBootcamperFoursLambdaVersionYzAKgGp9WnQFie6MPjLuQi2nSOlfktZyENagPtQE"
      },
      "listBootcamperEights": {
        "handler": "s_listBootcamperEights.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-eights",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listBootcamperEights",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListBootcamperEightsLambdaVersionwwCIUe09bXximBoNGavbm8tyx1sCQYg6AKKraqnAnA"
      },
      "bootcamperEights": {
        "handler": "s_bootcamperEights.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-eights/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-bootcamperEights",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "BootcamperEightsLambdaVersionQ5rshSZia05RQZtlteBZmI8K1gU4419GTN13OaxUfQ"
      },
      "createBootcamperEights": {
        "handler": "s_createBootcamperEights.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-eights",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createBootcamperEights",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateBootcamperEightsLambdaVersionNW6oFwbX7gT0yqc7RSo3INSzFdcC8FAI5s73uDlk"
      },
      "updateBootcamperEights": {
        "handler": "s_updateBootcamperEights.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-eights/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateBootcamperEights",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateBootcamperEightsLambdaVersionmLIwBXrFG4DdqaLSVnPoEFQuoLj9I37oZfapKcXzY"
      },
      "deleteBootcamperEights": {
        "handler": "s_deleteBootcamperEights.handler",
        "events": [
          {
            "http": {
              "path": "bootcamper-eights/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteBootcamperEights",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteBootcamperEightsLambdaVersion7CZB7iqLTl9YEBft4EfzQB5OyQKitbVW899vGi09xo"
      },
      "listResource": {
        "handler": "s_listResource.handler",
        "events": [
          {
            "http": {
              "path": "resources",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listResource",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListResourceLambdaVersionsvQD01rMbGgeENFtQNh0TZlQi8uPUc0Ge8GwGQTcy4"
      },
      "resource": {
        "handler": "s_resource.handler",
        "events": [
          {
            "http": {
              "path": "resources/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-resource",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ResourceLambdaVersionpos5c8JtHQxtMLCpGRFMMdOBReunxLk2YKf72pUYu0"
      },
      "createResource": {
        "handler": "s_createResource.handler",
        "events": [
          {
            "http": {
              "path": "resources",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createResource",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateResourceLambdaVersiontmtzgIGJf64xrL8T04F0UZ5ZbV7GTGNwsO9sQt95uRQ"
      },
      "updateResource": {
        "handler": "s_updateResource.handler",
        "events": [
          {
            "http": {
              "path": "resources/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateResource",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateResourceLambdaVersionYCkkiUYr8nD6PsyaxmPyo6Z2CqwfPfEAQzSr4FDCFk"
      },
      "deleteResource": {
        "handler": "s_deleteResource.handler",
        "events": [
          {
            "http": {
              "path": "resources/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteResource",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteResourceLambdaVersion3u7d4EAZToDgnGlpB7PB7eTukH6XBLZF6hkmCioHmE"
      },
      "listRecordings": {
        "handler": "s_listRecordings.handler",
        "events": [
          {
            "http": {
              "path": "recordings",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listRecordings",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListRecordingsLambdaVersionLfhIJBhTK9yUr1aJqEK9lCuqxH8uSNKCS7IJf2yDo"
      },
      "recording": {
        "handler": "s_recording.handler",
        "events": [
          {
            "http": {
              "path": "recordings/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-recording",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "RecordingLambdaVersionzywOcEZCi4nrU7mcCeFMAdXKEReQmD5CkHqXM3R2EJk"
      },
      "createRecording": {
        "handler": "s_createRecording.handler",
        "events": [
          {
            "http": {
              "path": "recordings",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createRecording",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateRecordingLambdaVersion6bBR9PRS7walpghxgXwQ63rCDIosA9jSSkklTG3Kxo4"
      },
      "updateRecording": {
        "handler": "s_updateRecording.handler",
        "events": [
          {
            "http": {
              "path": "recordings/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateRecording",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateRecordingLambdaVersioncTZkV0UlK32r9X7zhRI4RIv5nEG0l9NWryM2Bb2L4E"
      },
      "deleteRecording": {
        "handler": "s_deleteRecording.handler",
        "events": [
          {
            "http": {
              "path": "recordings/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteRecording",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteRecordingLambdaVersion3gCdMjCFOwa9cyg1CWcebNDt17ikYYuYOHtsof18"
      },
      "listWeek": {
        "handler": "s_listWeek.handler",
        "events": [
          {
            "http": {
              "path": "weeks",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listWeek",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListWeekLambdaVersionSVoarSPoDewdm1nOuzTDxFC8YC4U51h5HLyiB5rbU"
      },
      "week": {
        "handler": "s_week.handler",
        "events": [
          {
            "http": {
              "path": "weeks/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-week",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "WeekLambdaVersionvG0EniikB2o1tu1LbJMG4phBsPBApzbkrsQWPjRjk"
      },
      "createWeek": {
        "handler": "s_createWeek.handler",
        "events": [
          {
            "http": {
              "path": "weeks",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createWeek",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateWeekLambdaVersionBN6stSfHmt9DRqh5Zrf2TYLR2R0aopqR7PE1b27bmU"
      },
      "updateWeek": {
        "handler": "s_updateWeek.handler",
        "events": [
          {
            "http": {
              "path": "weeks/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateWeek",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateWeekLambdaVersionFcIuNaOudsKnP1YBvDqPuG81ZST38mvL4kNuHmPIU"
      },
      "deleteWeek": {
        "handler": "s_deleteWeek.handler",
        "events": [
          {
            "http": {
              "path": "weeks/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteWeek",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteWeekLambdaVersionIggqlhEuuqWsqbftQqid1r51Kl05RyKPsexIeRBLzw"
      },
      "listEvents": {
        "handler": "s_listEvents.handler",
        "events": [
          {
            "http": {
              "path": "events",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listEvents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListEventsLambdaVersionf1n6YUZos8PKMSMcwttzLNrJWuhRmVuIXgJNyNvVyQY"
      },
      "event": {
        "handler": "s_event.handler",
        "events": [
          {
            "http": {
              "path": "events/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-event",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "EventLambdaVersionPruEo9xbPQIdausETEIdl9CUXfOrt1atG8uoZKJOI"
      },
      "createEvent": {
        "handler": "s_createEvent.handler",
        "events": [
          {
            "http": {
              "path": "events",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-createEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateEventLambdaVersion8vTeLhFBFjugSE2EZyBZdSIU07eT9wDdY22PIJPCYp0"
      },
      "updateEvent": {
        "handler": "s_updateEvent.handler",
        "events": [
          {
            "http": {
              "path": "events/{id}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-updateEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateEventLambdaVersionpfd0JEepNTdnkcWARGUT0ETedgiDtxtHVv3BNsLuy8"
      },
      "deleteEvent": {
        "handler": "s_deleteEvent.handler",
        "events": [
          {
            "http": {
              "path": "events/{id}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-deleteEvent",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "DeleteEventLambdaVersioniUYc5dbI9brvFnxaL2a3IhrhXU27Ble6yMxzy05c"
      },
      "listWeekEvents": {
        "handler": "s_listWeekEvents.handler",
        "events": [
          {
            "http": {
              "path": "week-events/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "royal-code-dev-listWeekEvents",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ListWeekEventsLambdaVersion7fqO2MNB8Mp1QsUHwHYrC80QxUu1vw2PgELVvuKQ0Q"
      }
    },
    "resources": {
      "Resources": {
        "DynamoDbEnergiserTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "energiser-table"
          }
        },
        "DynamoDbBootcamperTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "bootcamper-table"
          }
        },
        "DynamoDbResourceTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "resource-table"
          }
        },
        "DynamoDbRecordingTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "recording-table"
          }
        },
        "DynamoDbBootcamperPairTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "bootcamper-2-table"
          }
        },
        "DynamoDbBootcamperFourTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "bootcamper-4-table"
          }
        },
        "DynamoDbBootcamperEightTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "bootcamper-8-table"
          }
        },
        "DynamoDbWeekTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "week-table"
          }
        },
        "DynamoDbEventTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "event-table"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yaml",
    "initialServerlessConfig": {
      "org": "claireld",
      "app": "royal-code",
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "app": "royal-code",
    "org": "claireld",
    "layers": {},
    "isDashboardMonitoringPreconfigured": true,
    "isDashboardAppPreconfigured": true,
    "orgUid": "da3c8eec-653e-4acb-a887-f0e86be8dabe",
    "appUid": "Mcplx7LrLRg6Fkf5C1",
    "artifact": "E:\\Users\\Claire\\Documents\\SchoolOfCode\\FinalProject\\bootcamp-7-final-project-back-endroyal-code\\.serverless\\royal-code.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/royal-code/dev/1636475359830-2021-11-09T16:29:19.830Z",
    "artifact": "royal-code.zip"
  }
}